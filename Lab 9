Task 1:
#include <iostream>
using namespace std;

class Vehicle {
protected:
    string model;
    double rate;
public:
    Vehicle(string m, double r) : model(m), rate(r) {}
    virtual double getDailyRate() = 0;
    virtual void displayDetails() = 0;
    virtual ~Vehicle() {}
};

class Car : public Vehicle {
public:
    Car(string m, double r) : Vehicle(m, r) {}
    double getDailyRate() override {
        return rate;
    }
    void displayDetails() override {
        cout << "Car Model: " << model << ", Daily Rate: Rs" << getDailyRate() << endl;
    }
};

class Bike : public Vehicle {
public:
    Bike(string m, double r) : Vehicle(m, r) {}
    double getDailyRate() override {
        return rate;
    }
    void displayDetails() override {
        cout << "Bike Model: " << model << ", Daily Rate: Rs" << getDailyRate() << endl;
    }
};

int main() {
    Vehicle* vehicles[2];
    vehicles[0] = new Car("Toyota Corolla", 50.0);
    vehicles[1] = new Bike("Honda 125", 20.0);

    for (int i = 0; i < 2; ++i) {
        vehicles[i]->displayDetails();
    }

    for (int i = 0; i < 2; ++i) {
        delete vehicles[i];
    }

    return 0;
}

Task 2 :
#include <iostream>
using namespace std;

class SmartDevice {
public:
    virtual void turnOn() = 0;
    virtual void turnOff() = 0;
    virtual void getStatus() = 0;
    virtual ~SmartDevice() {}
};

class LightBulb : public SmartDevice {
private:
    bool isOn;
    int brightness;
public:
    LightBulb(int b = 100) : isOn(false), brightness(b) {}
    
    void turnOn() override {
        isOn = true;
        cout << "LightBulb turned ON." << endl;
    }

    void turnOff() override {
        isOn = false;
        cout << "LightBulb turned OFF." << endl;
    }

    void getStatus() override {
        cout << "LightBulb is " << (isOn ? "ON" : "OFF")
             << ", Brightness: " << brightness << "%" << endl;
    }
};

class Thermostat : public SmartDevice {
private:
    bool isOn;
    double temperature;
public:
    Thermostat(double temp = 22.0) : isOn(false), temperature(temp) {}
    
    void turnOn() override {
        isOn = true;
        cout << "Thermostat turned ON." << endl;
    }

    void turnOff() override {
        isOn = false;
        cout << "Thermostat turned OFF." << endl;
    }

    void getStatus() override {
        cout << "Thermostat is " << (isOn ? "ON" : "OFF")
             << ", Temperature: " << temperature << "Â°C" << endl;
    }
};

int main() {
    SmartDevice* devices[2];

    devices[0] = new LightBulb(75);
    devices[1] = new Thermostat(24.5);

    for (int i = 0; i < 2; ++i) {
        devices[i]->turnOn();
        devices[i]->getStatus();
    }

    for (int i = 0; i < 2; ++i) {
        devices[i]->turnOff();
        devices[i]->getStatus();
        delete devices[i]; 
	    }

    return 0;
}

Task 3:
